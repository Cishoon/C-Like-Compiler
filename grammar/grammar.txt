<S> T_EOF
T_IDENTIFIER T_INTEGER_LITERAL T_FLOAT_LITERAL T_STRING_LITERAL T_CHAR_LITERAL T_IF T_ELSE T_WHILE T_FOR T_RETURN T_INT T_FLOAT T_CHAR T_VOID T_STRUCT T_PLUS T_MINUS T_MULTIPLY T_DIVIDE T_ASSIGN T_EQUAL T_NOTEQUAL T_LESS T_LESSEQUAL T_GREATER T_GREATEREQUAL T_AND T_OR T_NOT T_MOD T_INCREMENT T_DECREMENT T_BITAND T_BITOR T_BITXOR T_BITNOT T_LEFTSHIFT T_RIGHTSHIFT T_SEMICOLON T_LEFT_BRACE T_RIGHT_BRACE T_LEFT_PAREN T_RIGHT_PAREN T_LEFT_SQUARE T_RIGHT_SQUARE T_COMMA T_DOT T_ARROW T_COLON T_QUESTION T_EOF

<S> ::= <Program>
<Program> ::= <declaration_list>
<declaration_list> ::= <declaration> <declaration_list> | <declaration>
<declaration> ::= <var_declaration> | <fun_declaration>
<var_declaration> ::= <type_specifier> T_IDENTIFIER T_ASSIGN <expression> T_SEMICOLON | <type_specifier> T_IDENTIFIER T_SEMICOLON | <type_specifier> T_IDENTIFIER T_LEFT_SQUARE T_INTEGER_LITERAL T_RIGHT_SQUARE T_SEMICOLON
<type_specifier> ::= T_CONST <simple_type> | <simple_type>
<fun_declaration> ::= <fun_definition> <compound_stmt>
<fun_definition> ::= <type_specifier> T_IDENTIFIER T_LEFT_PAREN <param_list> T_RIGHT_PAREN | <type_specifier> T_IDENTIFIER T_LEFT_PAREN T_RIGHT_PAREN
<param_list> ::= <param> | <param_list> T_COMMA <param>
<param> ::= <type_specifier> T_IDENTIFIER | <type_specifier> T_IDENTIFIER T_LEFT_SQUARE T_RIGHT_SQUARE
<compound_stmt> ::= T_LEFT_BRACE <stmt_list> T_RIGHT_BRACE | T_LEFT_BRACE T_RIGHT_BRACE
<stmt_list> ::= <stmt> <stmt_list> | <stmt>
<stmt> ::= <var_declaration> | <expression_stmt> | <compound_stmt> | <selection_stmt> | <iteration_stmt> | <return_stmt>
<expression_stmt> ::= <expression> T_SEMICOLON
<expression> ::= <additive_expression> | <var> T_ASSIGN <expression> | <var> T_ASSIGN <bool_expression>
<var> ::= T_IDENTIFIER | T_IDENTIFIER T_LEFT_SQUARE <expression> T_RIGHT_SQUARE
<bool_expression> ::= T_LEFT_PAREN <bool_expression> T_RIGHT_PAREN | <additive_expression> <relop> <additive_expression> | <bool_expression> T_AND <bool_expression> | <bool_expression> T_OR <bool_expression> | T_NOT <bool_expression>
<additive_expression> ::= <term> | <additive_expression> <addop> <term>
<term> ::= <factor> | <term> <mulop> <factor>
<factor> ::= T_LEFT_PAREN <expression> T_RIGHT_PAREN | <var> | <fun_call> | T_INTEGER_LITERAL | T_STRING_LITERAL | T_CHAR_LITERAL | T_FLOAT_LITERAL
<fun_call> ::= T_IDENTIFIER T_LEFT_PAREN <argument> T_RIGHT_PAREN | T_IDENTIFIER T_LEFT_PAREN T_RIGHT_PAREN
<argument> ::= <expression> | <argument> T_COMMA <expression>
<simple_type> ::= T_VOID | T_FLOAT | T_INT | T_CHAR
<addop> ::= T_PLUS | T_MINUS
<mulop> ::= T_MULTIPLY | T_DIVIDE | T_MOD | T_BITAND | T_BITOR | T_BITXOR | T_LEFTSHIFT | T_RIGHTSHIFT
<relop> ::= T_LESS | T_GREATER | T_EQUAL | T_GREATEREQUAL | T_LESSEQUAL | T_NOTEQUAL
<selection_stmt> ::= T_IF T_LEFT_PAREN <bool_expression> T_RIGHT_PAREN <stmt> | T_IF T_LEFT_PAREN <bool_expression> T_RIGHT_PAREN <stmt> T_ELSE <stmt>
<return_stmt> ::= T_RETURN T_SEMICOLON | T_RETURN <expression> T_SEMICOLON
<iteration_stmt> ::= T_WHILE T_LEFT_PAREN <bool_expression> T_RIGHT_PAREN <stmt> | T_FOR T_LEFT_PAREN <expression_stmt> <bool_expression> T_SEMICOLON <expression> T_RIGHT_PAREN <stmt>
